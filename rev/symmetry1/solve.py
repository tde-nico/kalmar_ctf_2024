keys=[[2, 3, 3, 5, 3, 3, 1, 4, 1, 1, 3, 3, 1, 2, 2, 0], [5, 1, 5, 4, 7, 3, 2, 0, 0, 1, 7, 1, 0, 6, 2, 7], [2, 6, 6, 0, 5, 6, 5, 1, 6, 4, 7, 1, 1, 7, 3, 1], [4, 3, 0, 5, 2, 0, 4, 2, 7, 7, 7, 1, 1, 1, 7, 5], [1, 0, 0, 0, 4, 5, 3, 6, 3, 4, 7, 6, 4, 0, 1, 2], [5, 5, 7, 1, 3, 1, 7, 6, 6, 3, 1, 1, 2, 4, 6, 7], [2, 6, 2, 4, 1, 6, 0, 3, 7, 0, 6, 3, 0, 6, 7, 3]]
shifts=[[0, 1, 3, 5, 0, 1, 1, 0, 0, 1, 3, 5, 0, 1, 1, 0], [0, 1, 3, 5, 0, 1, 1, 0, 0, 1, 3, 5, 0, 1, 1, 0], [0, 1, 3, 5, 0, 1, 1, 0, 0, 1, 3, 5, 0, 1, 1, 0], [0, 1, 3, 5, 0, 1, 1, 0, 0, 1, 3, 5, 0, 1, 1, 0], [0, 1, 3, 5, 0, 1, 1, 0, 0, 1, 3, 5, 0, 1, 1, 0], [0, 1, 3, 5, 0, 1, 1, 0, 0, 1, 3, 5, 0, 1, 1, 0], [0, 1, 3, 5, 0, 1, 1, 0, 0, 1, 3, 5, 0, 1, 1, 0]]
ciphertexts=[[8, 12, 10, 7, 2, 6, 3, 2, 14, 1, 8, 4, 2, 12, 9, 15], [10, 13, 5, 2, 13, 12, 11, 5, 14, 5, 3, 12, 4, 11, 0, 9], [10, 4, 0, 3, 9, 13, 13, 2, 2, 1, 0, 4, 3, 15, 11, 12], [7, 13, 1, 13, 9, 9, 9, 10, 9, 12, 3, 0, 1, 10, 7, 12], [13, 3, 10, 6, 9, 9, 2, 13, 1, 10, 13, 0, 4, 2, 1, 0], [6, 2, 2, 2, 15, 9, 12, 4, 7, 6, 2, 15, 1, 10, 14, 7], [10, 12, 6, 14, 14, 2, 14, 12, 15, 0, 15, 0, 8, 9, 4, 2]]

BLOCKS = 7
BSIZE = 16

ROUND_PERM = [
	[11, 3, 10, 5, 12, 13, 14, 6, 2, 0, 1, 8, 9, 15, 4, 7],
	[6, 14, 7, 12, 5, 4, 3, 11, 15, 1, 0, 9, 8, 2, 13, 10],
	[8, 0, 9, 14, 7, 6, 5, 13, 1, 3, 2, 11, 10, 4, 15, 12],
	[10, 2, 11, 0, 9, 8, 7, 15, 3, 5, 4, 13, 12, 6, 1, 14],
	[11, 3, 10, 5, 12, 13, 14, 6, 2, 0, 1, 8, 9, 15, 4, 7],
	[6, 14, 7, 12, 5, 4, 3, 11, 15, 1, 0, 9, 8, 2, 13, 10],
	[6, 14, 7, 12, 5, 4, 3, 11, 15, 1, 0, 9, 8, 2, 13, 10],
	[11, 3, 10, 5, 12, 13, 14, 6, 2, 0, 1, 8, 9, 15, 4, 7],
	[11, 3, 10, 5, 12, 13, 14, 6, 2, 0, 1, 8, 9, 15, 4, 7],
	[6, 14, 7, 12, 5, 4, 3, 11, 15, 1, 0, 9, 8, 2, 13, 10],
	[8, 0, 9, 14, 7, 6, 5, 13, 1, 3, 2, 11, 10, 4, 15, 12],
	[10, 2, 11, 0, 9, 8, 7, 15, 3, 5, 4, 13, 12, 6, 1, 14],
	[11, 3, 10, 5, 12, 13, 14, 6, 2, 0, 1, 8, 9, 15, 4, 7],
	[6, 14, 7, 12, 5, 4, 3, 11, 15, 1, 0, 9, 8, 2, 13, 10],
	[6, 14, 7, 12, 5, 4, 3, 11, 15, 1, 0, 9, 8, 2, 13, 10],
	[11, 3, 10, 5, 12, 13, 14, 6, 2, 0, 1, 8, 9, 15, 4, 7]
]

INV_ROUND_PERM = [
	[9, 10, 8, 1, 14, 3, 7, 15, 11, 12, 2, 0, 4, 5, 6, 13],
	[10, 9, 13, 6, 5, 4, 0, 2, 12, 11, 15, 7, 3, 14, 1, 8],
	[1, 8, 10, 9, 13, 6, 5, 4, 0, 2, 12, 11, 15, 7, 3, 14],
	[3, 14, 1, 8, 10, 9, 13, 6, 5, 4, 0, 2, 12, 11, 15, 7],
	[9, 10, 8, 1, 14, 3, 7, 15, 11, 12, 2, 0, 4, 5, 6, 13],
	[10, 9, 13, 6, 5, 4, 0, 2, 12, 11, 15, 7, 3, 14, 1, 8],
	[10, 9, 13, 6, 5, 4, 0, 2, 12, 11, 15, 7, 3, 14, 1, 8],
	[9, 10, 8, 1, 14, 3, 7, 15, 11, 12, 2, 0, 4, 5, 6, 13],
	[9, 10, 8, 1, 14, 3, 7, 15, 11, 12, 2, 0, 4, 5, 6, 13],
	[10, 9, 13, 6, 5, 4, 0, 2, 12, 11, 15, 7, 3, 14, 1, 8],
	[1, 8, 10, 9, 13, 6, 5, 4, 0, 2, 12, 11, 15, 7, 3, 14],
	[3, 14, 1, 8, 10, 9, 13, 6, 5, 4, 0, 2, 12, 11, 15, 7],
	[9, 10, 8, 1, 14, 3, 7, 15, 11, 12, 2, 0, 4, 5, 6, 13],
	[10, 9, 13, 6, 5, 4, 0, 2, 12, 11, 15, 7, 3, 14, 1, 8],
	[10, 9, 13, 6, 5, 4, 0, 2, 12, 11, 15, 7, 3, 14, 1, 8],
	[9, 10, 8, 1, 14, 3, 7, 15, 11, 12, 2, 0, 4, 5, 6, 13]
]


sbox = [
	[8, 5, 1, 13, 9, 15, 4, 14, 10, 11, 3, 2, 0, 7, 12, 6],
	[3, 13, 11, 8, 4, 5, 12, 9, 10, 14, 6, 1, 15, 7, 2, 0],
	[1, 8, 3, 15, 13, 5, 6, 4, 0, 14, 9, 11, 2, 7, 12, 10],
	[4, 11, 13, 10, 5, 3, 15, 14, 0, 8, 9, 6, 12, 7, 2, 1],
	[8, 5, 1, 13, 9, 15, 4, 14, 10, 11, 3, 2, 0, 7, 12, 6],
	[3, 13, 11, 8, 4, 5, 12, 9, 10, 14, 6, 1, 15, 7, 2, 0],
	[3, 13, 11, 8, 4, 5, 12, 9, 10, 14, 6, 1, 15, 7, 2, 0],
	[8, 5, 1, 13, 9, 15, 4, 14, 10, 11, 3, 2, 0, 7, 12, 6],
	[8, 5, 1, 13, 9, 15, 4, 14, 10, 11, 3, 2, 0, 7, 12, 6],
	[3, 13, 11, 8, 4, 5, 12, 9, 10, 14, 6, 1, 15, 7, 2, 0],
	[1, 8, 3, 15, 13, 5, 6, 4, 0, 14, 9, 11, 2, 7, 12, 10],
	[4, 11, 13, 10, 5, 3, 15, 14, 0, 8, 9, 6, 12, 7, 2, 1],
	[8, 5, 1, 13, 9, 15, 4, 14, 10, 11, 3, 2, 0, 7, 12, 6],
	[3, 13, 11, 8, 4, 5, 12, 9, 10, 14, 6, 1, 15, 7, 2, 0],
	[3, 13, 11, 8, 4, 5, 12, 9, 10, 14, 6, 1, 15, 7, 2, 0],
	[8, 5, 1, 13, 9, 15, 4, 14, 10, 11, 3, 2, 0, 7, 12, 6],
]

inv_sbox = [
	[12, 2, 11, 10, 6, 1, 15, 13, 0, 4, 8, 9, 14, 3, 7, 5],
	[15, 11, 14, 0, 4, 5, 10, 13, 3, 7, 8, 2, 6, 1, 9, 12],
	[8, 0, 12, 2, 7, 5, 6, 13, 1, 10, 15, 11, 14, 4, 9, 3],
	[8, 15, 14, 5, 0, 4, 11, 13, 9, 10, 3, 1, 12, 2, 7, 6],
	[12, 2, 11, 10, 6, 1, 15, 13, 0, 4, 8, 9, 14, 3, 7, 5],
	[15, 11, 14, 0, 4, 5, 10, 13, 3, 7, 8, 2, 6, 1, 9, 12],
	[15, 11, 14, 0, 4, 5, 10, 13, 3, 7, 8, 2, 6, 1, 9, 12],
	[12, 2, 11, 10, 6, 1, 15, 13, 0, 4, 8, 9, 14, 3, 7, 5],
	[12, 2, 11, 10, 6, 1, 15, 13, 0, 4, 8, 9, 14, 3, 7, 5],
	[15, 11, 14, 0, 4, 5, 10, 13, 3, 7, 8, 2, 6, 1, 9, 12],
	[8, 0, 12, 2, 7, 5, 6, 13, 1, 10, 15, 11, 14, 4, 9, 3],
	[8, 15, 14, 5, 0, 4, 11, 13, 9, 10, 3, 1, 12, 2, 7, 6],
	[12, 2, 11, 10, 6, 1, 15, 13, 0, 4, 8, 9, 14, 3, 7, 5],
	[15, 11, 14, 0, 4, 5, 10, 13, 3, 7, 8, 2, 6, 1, 9, 12],
	[15, 11, 14, 0, 4, 5, 10, 13, 3, 7, 8, 2, 6, 1, 9, 12],
	[12, 2, 11, 10, 6, 1, 15, 13, 0, 4, 8, 9, 14, 3, 7, 5],
]


def to_nibbles(data):
	data = data.encode()
	data = [data[i//2] >> (4*((i+1)%2)) & 0xF for i in range(len(data)*2)]
	return data

def from_nibbles(data):
	data = bytes([data[i*2] << 4 | data[i*2+1] for i in range(len(data)//2)])
	return data


def add_or_sub(a1,a2):
	v3 = a2 & 1
	v4 = a1 >> 1
	v5 = a2 >> 1
	if ( (a1 & 1) == 1 ):
		return ((((2 * (v4 - v5)) & 0xE) - v3) + 1) % 16
	else:
		return (2 * (v4 + v5) + v3) % 16

def inv_add_or_sub(n, k):
	n_lsb = n % 2
	k_lsb = k % 2
	if n_lsb and k_lsb:
		return ((n - k) + 16) % 16
	elif n_lsb and not k_lsb:
		return (n + k) % 16
	elif not n_lsb and k_lsb:
		return (n + k) % 16
	else: # not n_lsb and not k_lsb:
		return ((n - k) + 16) % 16

DEBUG = 0

'''
print('sbox')
for round in range(BSIZE):
	round_box = ROUND_PERM[round]
	for i in range(BSIZE):
		print(inv_sbox[round][sbox[round][i]], end=', ')
	print()

print('add_sub')
for i in range(16):
	for j in range(16):
		print(inv_add_or_sub(add_or_sub(j, i), i), end=', ')
	print()

print('round')
for i in range(16):
	for j in range(16):
		print(INV_ROUND_PERM[i][ROUND_PERM[i][j]], end=', ')
	print()

print('\n')


plaintext = 'ciaoking'
plaintext = to_nibbles(plaintext)

key = keys[0]
block = plaintext


if DEBUG: print(block)

for round in range(BSIZE):
	round_box = ROUND_PERM[round]
	_block = [None] * BSIZE
	for i in range(BSIZE): _block[round_box[i]] = block[i] #rbox
	if DEBUG: print('rbox', _block)
	_block = [add_or_sub(_block[i], key[i]) for i in range(BSIZE)] #pbox
	if DEBUG: print('pbox', _block)
	block = [round_box[round_box[_block[i]]] for i in range(BSIZE)] #sbox
	if DEBUG: print('sbox', block)
	if DEBUG: print(round)

if DEBUG: print()
#'''


for b in range(BLOCKS):
	block = ciphertexts[b]
	key = keys[b]

	for round in range(BSIZE-1,-1,-1):
		if DEBUG: print(round)
		_block = [inv_sbox[round][block[i]] for i in range(BSIZE)] #sbox
		if DEBUG: print('sbox', block)
		_block = [inv_add_or_sub(_block[i], key[i]) for i in range(BSIZE)] #pbox
		if DEBUG: print('pbox', block)
		round_box = INV_ROUND_PERM[round]
		for i in range(BSIZE): block[round_box[i]] = _block[i] #rbox
		if DEBUG: print('rbox', block)

	block = ''.join([hex(i)[2:] for i in block])
	print(bytes.fromhex(block).decode(), end='')
print()

# kalmar{nice!_now_please_try_the_other_two_parts}
